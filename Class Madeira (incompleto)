class CalcMateria {
  // Atributos da classe 
  late double alturaMateriaPrima;   // Altura da matéria-prima em metros
  late double comprimentoMateriaPrima;  // Comprimento da matéria-prima em metros
  late double alturaPecaA;   // Altura da primeira peça de corte em metros
  late double comprimentoPecaA;  // Comprimento da primeira peça de corte em metros
  late double alturaPecaB;   // Altura da segunda peça de corte em metros
  late double comprimentoPecaB;  // Comprimento da segunda peça de corte em metros
  late double areaMateriaPrima;  // Área da matéria-prima em metros quadrados
  late double areaPecaA; // Área da primeira peça de corte em metros quadrados
  late double areaPecaB; // Área da segunda peça de corte em metros quadrados
  late int quantidadePecasA;    // Quantidade de peças do tipo A que podem ser cortadas
  late double sobra;  // Sobras de material após o corte em metros quadrados
  late int quantidadePecasB;    // Quantidade de peças do tipo B que podem ser cortadas com a sobra

  // Métodos para definir as dimensões
  void setAlturaMateriaPrima(double v) {
    alturaMateriaPrima = v;
  }

  void setComprimentoMateriaPrima(double v) {
    comprimentoMateriaPrima = v; 
  }

  void setAlturaPecaA(double v) {
    alturaPecaA = v; 
  }

  void setComprimentoPecaA(double v) {
    comprimentoPecaA = v; 
  }

  void setAlturaPecaB(double v) {
    alturaPecaB = v; 
  }

  void setComprimentoPecaB(double v) {
    comprimentoPecaB = v; 
  }

  // Métodos para obter as dimensões
  double getAlturaMateriaPrima() {
    return alturaMateriaPrima; 
  }

  double getComprimentoMateriaPrima() {
    return comprimentoMateriaPrima; 
  }

  double getAlturaPecaA() {
    return alturaPecaA;
  }

  double getComprimentoPecaA() {
    return comprimentoPecaA;
  }

  double getAlturaPecaB() {
    return alturaPecaB; 
  }

  double getComprimentoPecaB() {
    return comprimentoPecaB; 
  }

  // Método para calcular a área da matéria-prima
  void calcAreaMateriaPrima() {
    areaMateriaPrima = alturaMateriaPrima * comprimentoMateriaPrima; 
  }

  // Método para obter a área da matéria-prima
  double getAreaMateriaPrima() {
    return areaMateriaPrima; 
  }

  // Método para calcular a área da primeira peça de corte
  void calcAreaPecaA() {
    areaPecaA = alturaPecaA * comprimentoPecaA;
  }

  // Método para obter a área da primeira peça de corte
  double getAreaPecaA() {
    return areaPecaA;
  }

  // Método para calcular a área da segunda peça de corte
  void calcAreaPecaB() {
    areaPecaB = alturaPecaB * comprimentoPecaB;
  }

  // Método para obter a área da segunda peça de corte
  double getAreaPecaB() {
    return areaPecaB;
  }

  // Método para calcular a quantidade de peças do tipo A que podem ser cortadas
  void calcQuantidadePecasA() {
    if (areaPecaA > areaMateriaPrima) {
      print('Não é possível cortar peças do tipo A, a área da peça é maior que a área da matéria-prima.');
      quantidadePecasA = 0;
      sobra = areaMateriaPrima; // Sobras são a área total da matéria-prima
    } else {
      quantidadePecasA = (areaMateriaPrima / areaPecaA).floor(); 
      sobra = areaMateriaPrima - (quantidadePecasA * areaPecaA);
    }
  }

  // Método para obter a quantidade de peças do tipo A que podem ser cortadas
  int getQuantidadePecasA() {
    return quantidadePecasA; 
  }

  // Método para calcular a quantidade de peças do tipo B que podem ser cortadas com a sobra
  void calcQuantidadePecasB() {
    if (areaPecaB > sobra) {
      quantidadePecasB = 0;
    } else {
      quantidadePecasB = (sobra / areaPecaB).floor();
    }
  }

  // Método para obter a quantidade de peças do tipo B que podem ser cortadas
  int getQuantidadePecasB() {
    return quantidadePecasB; 
  }

  // Método para obter a sobra de material após o corte
  double getSobra() {
    return sobra; 
  }
}

// Função principal 
void main() {
  // Cria uma nova instância da classe CalcMateria
  var calculo1 = CalcMateria();
  
  // Define as dimensões da matéria-prima
  calculo1.setAlturaMateriaPrima(6.0); 
  calculo1.setComprimentoMateriaPrima(5.0); 
  
  // Define as dimensões da primeira peça de corte
  calculo1.setAlturaPecaA(3.0); 
  calculo1.setComprimentoPecaA(3.0); 
  
  // Define as dimensões da segunda peça de corte
  calculo1.setAlturaPecaB(2.0); 
  calculo1.setComprimentoPecaB(2.0); 
  
  // Calcula as áreas
  calculo1.calcAreaMateriaPrima();
  calculo1.calcAreaPecaA();
  calculo1.calcAreaPecaB();
  
  // Exibe as áreas
  print('Área da matéria-prima: ${calculo1.getAreaMateriaPrima()} m²');
  print('Área da peça A: ${calculo1.getAreaPecaA()} m²');
  print('Área da peça B: ${calculo1.getAreaPecaB()} m²');
  
  // Calcula e exibe a quantidade de peças A e sobra
  calculo1.calcQuantidadePecasA();
  print('Quantidade de peças A que podem ser cortadas: ${calculo1.getQuantidadePecasA()}');
  print('Sobra após corte das peças A: ${calculo1.getSobra()} m²');
  
  // Calcula e exibe a quantidade de peças B e sobra final
  calculo1.calcQuantidadePecasB();
  print('Quantidade de peças B que podem ser cortadas com a sobra: ${calculo1.getQuantidadePecasB()}');
  print('Sobra final da matéria-prima: ${calculo1.getSobra()} m²');
}
