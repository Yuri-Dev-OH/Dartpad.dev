import 'package:flutter/material.dart';

void main() {
  runApp(MaterialApp(
    debugShowCheckedModeBanner: false, // Remove o banner "DEBUG"
    home: MyApp(),
    theme: ThemeData(primarySwatch: Colors.deepPurple),
  ));
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class Aluno {
  late double mensalidade;
  late double desconto;
  late double aluno; // Tipos de alunos: 1 para pagante, 2 para bolsista parcial, 3 para bolsista integral
  late double dia; // Dia de pagamento
  late double mensalidadeFinal;
  late double totalDesconto; // Valor total do desconto
  late double juros; // Valor total dos juros

  void setMensalidade(double m) {
    mensalidade = m;
  }

  void setDia(double d) {
    dia = d;
  }

  void setAluno(double a) {
    aluno = a;
  }

  void calcularDesconto() {
    if (aluno == 3) {
      // Bolsista integral não paga
      mensalidadeFinal = 0;
      totalDesconto = mensalidade;
      juros = 0;
      return;
    }

    double descontoDia = (dia >= 1 && dia <= 5)
        ? 10
        : (dia >= 6 && dia <= 9)
            ? 5
            : 0;

    double descontoAluno = (aluno == 2) ? 0.50 : 0.00;

    totalDesconto = mensalidade * descontoAluno + mensalidade * (descontoDia / 100);

    double mensalidadeComDesconto =
        mensalidade * (1 - descontoAluno) * (1 - descontoDia / 100);

    juros = (dia > 10) ? (dia - 10) * 0.33 : 0;

    mensalidadeFinal = mensalidadeComDesconto + juros;
  }

  double getMensalidadeFinal() => mensalidadeFinal;
  double getTotalDesconto() => totalDesconto;
  double getJuros() => juros;
}

class _MyAppState extends State<MyApp> {
  final TextEditingController mensalidadeController = TextEditingController();
  final TextEditingController diaController = TextEditingController();
  String tipoAluno = '1'; // Valor inicial para Pagante
  double mensalidadeFinal = 0.0;
  double totalDesconto = 0.0;
  double juros = 0.0;
  String mensagem = '';

  final aluno = Aluno();

  void calcularMensalidade() {
    final mensalidade = double.tryParse(mensalidadeController.text);
    final dia = double.tryParse(diaController.text);
    final tipo = double.tryParse(tipoAluno);

    if (mensalidade != null && dia != null && tipo != null) {
      aluno.setMensalidade(mensalidade);
      aluno.setDia(dia);
      aluno.setAluno(tipo);

      aluno.calcularDesconto();

      setState(() {
        mensalidadeFinal = aluno.getMensalidadeFinal();
        totalDesconto = aluno.getTotalDesconto();
        juros = aluno.getJuros();

        mensagem = tipo == 3
            ? 'Você é bolsista integral e não precisa pagar mensalidade!'
            : '';
      });
    } else {
      setState(() {
        mensagem = 'Por favor, preencha todos os campos corretamente.';
      });
    }
  }

  void mostrarInformacoes(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Informações'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Tipos de Aluno:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                Text('- Pagante: Paga o valor completo.'),
                Text('- Bolsista Parcial: Recebe 50% de desconto na mensalidade.'),
                Text('- Bolsista Integral: Não paga mensalidade.'),
                SizedBox(height: 10),
                Text(
                  'Juros:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                Text(
                    '- Se o pagamento for realizado após o dia 10, é cobrado R\$0,33 de juros por dia de atraso.'),
                SizedBox(height: 10),
                Text(
                  'Descontos:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                Text(
                    '- Pagamento entre os dias 1 e 5: Desconto de 10%.\n- Pagamento entre os dias 6 e 9: Desconto de 5%.'),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text(
                'Fechar',
                style: TextStyle(color: Colors.deepPurple),
              ),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text(
            'Cálculo de Mensalidade',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          centerTitle: true,
          backgroundColor: Colors.deepPurple,
        ),
        body: SingleChildScrollView(
          padding: EdgeInsets.all(16),
          child: Column(
            children: [
              Image.network(
                'https://raw.githubusercontent.com/Yuri-Dev-OH/Dartpad.dev/refs/heads/main/aluno.png',
                width: 120,
                height: 120,
              ),
              SizedBox(height: 20),
              Text(
                'Calcule sua mensalidade com base no tipo de aluno e no dia do pagamento.',
                textAlign: TextAlign.center,
                style: TextStyle(
                    fontSize: 16, color: Colors.deepPurple[600], fontFamily: 'Arial'),
              ),
              SizedBox(height: 20),
              _buildTextField(
                controller: mensalidadeController,
                label: 'Mensalidade',
                hint: 'Insira o valor da mensalidade',
                keyboardType: TextInputType.number,
              ),
              SizedBox(height: 16),
              _buildTextField(
                controller: diaController,
                label: 'Dia de Pagamento',
                hint: 'Insira o dia do pagamento',
                keyboardType: TextInputType.number,
              ),
              SizedBox(height: 16),
              DropdownButtonFormField<String>(
                value: tipoAluno,
                decoration: InputDecoration(
                  labelText: 'Tipo de Aluno',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                items: [
                  DropdownMenuItem(value: '1', child: Text('Pagante')),
                  DropdownMenuItem(value: '2', child: Text('Bolsista Parcial')),
                  DropdownMenuItem(value: '3', child: Text('Bolsista Integral')),
                ],
                onChanged: (value) {
                  setState(() {
                    tipoAluno = value ?? '1';
                  });
                },
              ),
              SizedBox(height: 20),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  ElevatedButton(
                    onPressed: calcularMensalidade,
                    style: ElevatedButton.styleFrom(
                      padding: EdgeInsets.symmetric(vertical: 12, horizontal: 40),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(25),
                      ),
                      backgroundColor: Colors.deepPurple,
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          Icons.calculate, // Ícone de cálculo
                          color: Colors.white,
                        ),
                        SizedBox(width: 8),
                        Text(
                          'Calcular',
                          style: TextStyle(
                              fontSize: 18, color: Colors.white, fontFamily: 'Arial'),
                        ),
                      ],
                    ),
                  ),
                  ElevatedButton(
                    onPressed: () => mostrarInformacoes(context),
                    style: ElevatedButton.styleFrom(
                      padding: EdgeInsets.symmetric(vertical: 12, horizontal: 40),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(25),
                      ),
                      backgroundColor: Colors.purple[300], // Cor complementar ao roxo
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          Icons.info, // Ícone de informação
                          color: Colors.white,
                        ),
                        SizedBox(width: 8),
                        Text(
                          'Informações',
                          style: TextStyle(
                              fontSize: 18, color: Colors.white, fontFamily: 'Arial'),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              SizedBox(height: 20),
              if (mensalidadeFinal > 0 || mensagem.isNotEmpty) _buildResultSection(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    required String hint,
    required TextInputType keyboardType,
  }) {
    return TextField(
      controller: controller,
      keyboardType: keyboardType,
      decoration: InputDecoration(
        labelText: label,
        hintText: hint,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }

  Widget _buildResultSection() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.deepPurple[50], // Fundo suave para o resultado
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.deepPurple[200]!),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (totalDesconto > 0)
            Text(
              'Desconto Total: - R\$${totalDesconto.toStringAsFixed(2)}',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.green),
            ),
          if (juros > 0)
            Text(
              'Juros: + R\$${juros.toStringAsFixed(2)}',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.red),
            ),
          if (mensalidadeFinal > 0)
            Text(
              'Mensalidade Final: R\$${mensalidadeFinal.toStringAsFixed(2)}',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.deepPurple),
            ),
          if (mensagem.isNotEmpty)
            Padding(
              padding: EdgeInsets.only(top: 10),
              child: Text(
                mensagem,
                style: TextStyle(fontSize: 16, color: Colors.deepPurple),
              ),
            ),
        ],
      ),
    );
  }
}
